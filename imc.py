# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W19_T-y9SaKr8AWMeClhca__TVYv3HlX
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Generar datos sintéticos (aleatorios)
np.random.seed(42)  # Para reproducibilidad
num_muestras = 100

# Altura en metros (1.50m a 2.00m)
altura = np.random.uniform(1.50, 2.00, num_muestras)

# Peso en kg (45kg a 120kg)
peso = np.random.uniform(45, 120, num_muestras)

# Calcular IMC real (peso / altura^2)
imc_real = peso / (altura ** 2)

# Agregar un poco de ruido para hacerlo más realista
ruido = np.random.normal(0, 2, num_muestras)
imc_real += ruido

# Preparar los datos para el modelo (X: peso y altura, y: IMC)
X = np.column_stack((peso, altura))
y = imc_real

# Crear y entrenar el modelo de regresión lineal
modelo = LinearRegression()
modelo.fit(X, y)

# Predecir IMC con el modelo entrenado
imc_pred = modelo.predict(X)

# Coeficientes del modelo
print(f"Intercepto (b): {modelo.intercept_:.2f}")
print(f"Coeficientes (w): {modelo.coef_}")

# Métricas de evaluación
mse = mean_squared_error(y, imc_pred)
r2 = r2_score(y, imc_pred)
print(f"\nError Cuadrático Medio (MSE): {mse:.2f}")
print(f"Coeficiente de Determinación (R²): {r2:.2f}")

# Visualización
plt.figure(figsize=(12, 5))

# Gráfico 3D
ax = plt.subplot(121, projection='3d')
ax.scatter(peso, altura, y, c='blue', label='Datos reales')
ax.scatter(peso, altura, imc_pred, c='red', label='Predicciones')
ax.set_xlabel('Peso (kg)')
ax.set_ylabel('Altura (m)')
ax.set_zlabel('IMC')
ax.set_title('Regresión Lineal para IMC')
ax.legend()

# Gráfico 2D: Real vs Predicho
plt.subplot(122)
plt.scatter(y, imc_pred, alpha=0.6)
plt.plot([min(y), max(y)], [min(y), max(y)], '--r')
plt.xlabel('IMC Real')
plt.ylabel('IMC Predicho')
plt.title('IMC Real vs Predicho')

plt.tight_layout()
plt.show()

# Función para predecir IMC con nuevos datos
def predecir_imc(peso, altura):
    return modelo.predict([[peso, altura]])[0]

# Ejemplo de predicción
ejemplo_peso = 70
ejemplo_altura = 1.75
imc_ejemplo = predecir_imc(ejemplo_peso, ejemplo_altura)
print(f"\nPredicción de ejemplo:")
print(f"Para peso={ejemplo_peso}kg y altura={ejemplo_altura}m -> IMC predicho: {imc_ejemplo:.2f}")